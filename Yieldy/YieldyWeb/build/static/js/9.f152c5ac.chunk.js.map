{"version":3,"sources":["utils/colors.js","container/DashboardPage/DashboardPage.js"],"names":["getColor","availableColor","window","color","getComputedStyle","document","documentElement","getPropertyValue","genLineData","data","barLabel","chartLabel","labels","reverse","datasets","label","backgroundColor","borderColor","borderWidth","DashboardPage","props","useState","isLoading","setIsLoading","showCompany","setShowCompany","company","useSelector","state","companies","profile","user","userProfile","relatedDevices","device","tasks","task","fetchedRelated","status","statusList","dispatch","useDispatch","console","log","useEffect","a","companyActions","taskActions","deviceActions","fetchCompany","then","fetchTask","fetchRelatedDevice","map","push","statusCode","className","style","margin","data-content","lg","md","sm","xs","action","onClick","isOpen","name","website","address","email","phone","registrationdate","moment","format","description","i","length","title","subTitle","cpuusage","Date","dataAdded","Math","floor","memusage","fullscreen","filter","item"],"mappings":"wGAAA,kCAwBO,IAAMA,EAAW,WAAiC,IAAhCC,EAA+B,uDAAd,UACxC,GAAsB,qBAAXC,OACT,OAAO,KAGT,IAAMC,EAAQD,OACXE,iBAAiBC,SAASC,iBAC1BC,iBAFW,YAEWN,IAEzB,OAAOE,I,+PCTHK,EAAc,SAACC,EAAMC,EAAUC,GACnC,MAAO,CACLC,OAAQF,EAASG,UACjBC,SAAU,CACR,CACEC,MAAOJ,EACPK,gBAAiBhB,YAAS,WAC1BiB,YAAajB,YAAS,WACtBkB,YAAa,EACbT,KAAMA,EAAKI,cAoNJM,UA5LO,SAAAC,GAAU,IAjBZX,EAAMM,EAiBK,EAGKM,oBAAS,GAHd,mBAGtBC,EAHsB,KAGXC,EAHW,OAISF,oBAAS,GAJlB,mBAItBG,EAJsB,KAITC,EAJS,KAKvBC,EAAUC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,QAAQG,UAAU,MACvDC,EAAUH,aAAY,SAAAC,GAAK,OAAIA,EAAMG,KAAKC,eAC1CC,EAAiBN,aAAY,SAAAC,GAAK,OAAIA,EAAMM,OAAOD,kBACnDE,EAAQR,aAAY,SAAAC,GAAK,OAAIA,EAAMQ,KAAKC,kBACxCC,EAASX,aAAY,SAAAC,GAAK,OAAIA,EAAMM,OAAOK,cAC7CA,EAAa,GACXC,EAAWC,cA8BjB,OA7BAC,QAAQC,IAAIL,GAGZM,qBAAU,WAAM,4CAEd,sBAAAC,EAAA,sEACQL,EAASM,OADjB,4CAFc,kEAKd,sBAAAD,EAAA,sEACQL,EAASO,OADjB,4CALc,kEAQd,sBAAAF,EAAA,sEACQL,EAASQ,OADjB,4CARc,sBACdzB,GAAa,GADC,0CAWd0B,GAAeC,KAXD,0CAWMC,IAAaD,KAXnB,0CAWwBE,IAAsBF,KAAK3B,GAAa,MAC7E,CAACiB,IAGJI,qBAAU,WACFX,IACJM,EAAa,GACbN,EAAeoB,KAAI,SAAAnB,GACjBK,EAAWe,KAAKpB,EAAOqB,eAEzBf,EAASQ,IAA8BT,OAExC,CAACN,KAGAX,GAAgBI,GAAcI,EAQhC,kBAAC,IAAD,CACE0B,UAAU,gBACVC,MAAO,CAAEC,OAAQ,KAEjB,6BACE,wBAAIF,UAAU,UAAUG,eAAa,eAEvC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,GAAG,IAAIC,GAAG,IAAIC,GAAG,KAAKC,GAAG,MAC5B,kBAAC,IAAD,CAAMP,UAAU,OAAOrD,MAAM,QAC3B,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKqD,UAAU,UACb,yBAAKA,UAAU,qBAAf,aAGJ,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAeQ,QAAM,EAACR,UAAU,sBAAsBS,QAAS,WAAQxC,GAAgBD,IAAgBrB,MAAM,QAC3G,yBAAKqD,UAAU,uCAAf,UAGA,yBAAKA,UAAU,kCACZhC,EAAc,kBAAC,IAAD,MAAmB,kBAAC,IAAD,SAIxC,kBAAC,IAAD,CAAU0C,OAAQ1C,GAChB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAewC,QAAM,EAACR,UAAU,uBAC9B,0BAAMA,UAAU,kCAAhB,SACA,0BAAMA,UAAU,YAAY9B,EAAQyC,OAEtC,kBAAC,IAAD,CAAeH,QAAM,EAACR,UAAU,uBAC9B,0BAAMA,UAAU,kCAAhB,YACA,0BAAMA,UAAU,YAAgC,KAApB9B,EAAQ0C,QAClC,yBAAKZ,UAAU,cAAf,WACA9B,EAAQ0C,UAGZ,kBAAC,IAAD,CAAeJ,QAAM,EAACR,UAAU,uBAC9B,0BAAMA,UAAU,kCAAhB,YACA,0BAAMA,UAAU,YAAgC,KAApB9B,EAAQ2C,QAClC,yBAAKb,UAAU,cAAf,WACA9B,EAAQ2C,UAGZ,kBAAC,IAAD,CAAeL,QAAM,EAACR,UAAU,uBAC9B,0BAAMA,UAAU,kCAAhB,UACA,0BAAMA,UAAU,YACd,8BAAyB,KAAlB9B,EAAQ4C,MACb,yBAAKd,UAAU,cAAf,WACA9B,EAAQ4C,SAId,kBAAC,IAAD,CAAeN,QAAM,EAACR,UAAU,wBAC9B,0BAAMA,UAAU,kCAAhB,kBACA,0BAAMA,UAAU,YAA8B,KAAlB9B,EAAQ6C,MAClC,yBAAKf,UAAU,cAAf,WACA9B,EAAQ6C,QAGZ,kBAAC,IAAD,CAAeP,QAAM,EAACR,UAAU,uBAC9B,0BAAMA,UAAU,kCAAhB,sBACA,0BAAMA,UAAU,YAAyC,KAA7B9B,EAAQ8C,iBAClC,yBAAKhB,UAAU,cAAf,WACAiB,EAAO/C,EAAQ8C,kBAAkBE,OAAO,gBAG5C,kBAAC,IAAD,CAAeV,QAAM,EAACR,UAAU,uBAC9B,0BAAMA,UAAU,kCAAhB,gBACA,0BAAMA,UAAU,YAAe9B,EAAQiD,YAErCjD,EAAQiD,YADR,yBAAKnB,UAAU,cAAf,iBAQZ,6BACE,wBAAIA,UAAU,UAAUG,eAAa,qBAEvC,kBAAC,IAAD,OACK1B,GAAkBA,EAAeoB,KAAI,SAACnB,EAAQ0C,GAC/C,OAAO,kBAAC,IAAD,CAAKhB,GAAG,IAAIC,GAAG,IAAIC,GAAG,KAAKC,GAAG,MACnC,kBAAC,IAAD,KACE,kBAAC,IAAD,oBACe,IAAK7B,EAAOiC,MAE3B,+BACG7B,GAAUA,EAAOsC,GAAGnE,KAAKoE,OAAS,GAAK,kBAAC,IAAD,CACxCvC,OAAO,MACPwC,MAAM,MACNC,SAAS,wBAERzC,GAAUA,EAAOsC,GAAGnE,KAAKoE,OAAS,GACnC,kBAAC,IAAD,CACEpE,KAAMD,EACJ8B,EAAOsC,GAAGnE,KAAK4C,KAAI,SAAAf,GAAM,OAAIA,EAAO0C,YACpC1C,EAAOsC,GAAGnE,KAAK4C,KAAI,SAAAf,GAAM,OAAImC,EAAO,IAAIQ,KAAK3C,EAAO4C,YAAYR,OAAO,kBACvE,kBAGN,+BACGpC,GAAUA,EAAOsC,GAAGnE,KAAKoE,OAAS,GACnC,kBAAC,IAAD,CACEpE,KAAMD,EACJ8B,EAAOsC,GAAGnE,KAAK4C,KAAI,SAAAf,GAAM,OAAI6C,KAAKC,MAAwB,IAAlB9C,EAAO+C,aAC/C/C,EAAOsC,GAAGnE,KAAK4C,KAAI,SAAAf,GAAM,OAAImC,EAAO,IAAIQ,KAAK3C,EAAO4C,YAAYR,OAAO,kBACvE,yBAQhB,kBAAC,IAAD,CAAKd,GAAG,IAAIC,GAAG,IAAIC,GAAG,KAAKC,GAAG,MAC5B,kBAAC,IAAD,KACE,kBAAC,IAAD,iBAGA,kBAAC,IAAD,CAAUuB,YAAY,KAExB,+BACGnD,GACD,kBAAC,IAAD,KACE,kBAAC,IAAD,qBACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAK1B,MApMDA,EAoMkB0B,EAnM7B,CACLrB,SAAU,CACR,CACEL,KAAM,CAACA,EAAK8E,QAAO,SAAAC,GAAI,MAAoB,QAAhBA,EAAKlD,UAAkBuC,OAAQpE,EAAK8E,QAAO,SAAAC,GAAI,MAAoB,SAAhBA,EAAKlD,UAAmBuC,QACtG7D,gBAAiB,CACf,UACA,UACA,WAEFD,MAAOA,IAGXH,OAAQ,CAAC,MAAO,qBA+Cd,kBAAC,IAAD","file":"static/js/9.f152c5ac.chunk.js","sourcesContent":["// const availableColors = [\n//   'blue',\n//   'indigo',\n//   'purple',\n//   'pink',\n//   'red',\n//   'orange',\n//   'yellow',\n//   'green',\n//   'teal',\n//   'cyan',\n//   'white',\n//   'gray',\n//   'gray-dark',\n//   'primary',\n//   'secondary',\n//   'success',\n//   'info',\n//   'warning',\n//   'danger',\n//   'light',\n//   'dark',\n// ];\n\nexport const getColor = (availableColor = 'primary') => {\n  if (typeof window === 'undefined') {\n    return null;\n  }\n\n  const color = window\n    .getComputedStyle(document.documentElement)\n    .getPropertyValue(`--${availableColor}`);\n\n  return color;\n};\n\nexport const getThemeColors = () => [\n  'primary',\n  'secondary',\n  'success',\n  'info',\n  'warning',\n  'danger',\n];\n","import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  CardBody,\n  ListGroup,\n  ListGroupItem,\n  Collapse,\n  Col,\n  Row,\n  CardHeader,\n} from 'reactstrap';\nimport { Pie, Line } from 'react-chartjs-2';\nimport {\n  MdUnfoldMore,\n  MdUnfoldLess\n} from 'react-icons/md';\nimport { Card, Calendar, Result } from 'antd';\nimport * as moment from 'moment'\nimport * as companyActions from '../../store/actions/company';\nimport * as taskActions from '../../store/actions/task';\nimport * as deviceActions from '../../store/actions/device';\nimport { Page, PageSpinner } from 'components/BasicElement';\nimport { getColor } from 'utils/colors';\n\nconst genLineData = (data, barLabel, chartLabel) => {\n  return {\n    labels: barLabel.reverse(),\n    datasets: [\n      {\n        label: chartLabel,\n        backgroundColor: getColor('primary'),\n        borderColor: getColor('primary'),\n        borderWidth: 1,\n        data: data.reverse(),\n      },\n    ],\n  };\n};\n\n\nconst getPieData = (data, label, labels) => {\n  return {\n    datasets: [\n      {\n        data: [data.filter(item => item.status === \"WIP\").length, data.filter(item => item.status === \"done\").length],\n        backgroundColor: [\n          \"#6a82fb\",\n          \"#fc5c7d\",\n          \"#45b649\",\n        ],\n        label: label,\n      },\n    ],\n    labels: [\"WIP\", \"FINISHED\"],\n  };\n};\n\nconst DashboardPage = props => {\n\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [showCompany, setShowCompany] = useState(true);\n  const company = useSelector(state => state.company.companies[0]);\n  const profile = useSelector(state => state.user.userProfile);\n  const relatedDevices = useSelector(state => state.device.relatedDevices);\n  const tasks = useSelector(state => state.task.fetchedRelated);\n  const status = useSelector(state => state.device.statusList);\n  let statusList = [];\n  const dispatch = useDispatch();\n  console.log(status);\n\n\n  useEffect(() => {\n    setIsLoading(true);\n    async function fetchCompany() {\n      await dispatch(companyActions.fetchCompany())\n    }\n    async function fetchTask() {\n      await dispatch(taskActions.fetchRelatedTask())\n    }\n    async function fetchRelatedDevice() {\n      await dispatch(deviceActions.fetchRelatedDevice());\n    }\n    fetchCompany().then(fetchTask()).then(fetchRelatedDevice()).then(setIsLoading(false));\n  }, [dispatch])\n\n\n  useEffect(() => {\n    if (!!relatedDevices) {\n      statusList = [];\n      relatedDevices.map(device => {\n        statusList.push(device.statusCode)\n      })\n      dispatch(deviceActions.fetchStatusList(statusList));\n    }\n  }, [relatedDevices])\n\n\n  if (isLoading || !!!company || !!!profile) {\n    return (\n      <PageSpinner />\n    )\n  }\n\n\n  return (\n    <Page\n      className=\"DashboardPage\"\n      style={{ margin: 20 }}\n    >\n      <div>\n        <hr className=\"hr-text\" data-content=\"Dashboard\" />\n      </div>\n      <Row>\n        <Col lg=\"8\" md=\"8\" sm=\"12\" xs=\"12\" >\n          <Card className=\"mb-4\" color=\"info\">\n            <CardHeader>\n              <Row className=\"d-flex\">\n                <div className=\"mx-8 ml-4 mr-auto\">Company</div>\n              </Row>\n            </CardHeader>\n            <CardBody>\n              <ListGroup>\n                <ListGroupItem action className=\"border-light d-flex\" onClick={() => { setShowCompany(!showCompany) }} color=\"info\">\n                  <div className=\"mx-8 font-semibold col-md-8 mr-auto\">\n                    Detail\n                                </div>\n                  <div className=\"align-self-center text-red-500\">\n                    {showCompany ? <MdUnfoldLess /> : <MdUnfoldMore />}\n                  </div>\n                </ListGroupItem>\n              </ListGroup>\n              <Collapse isOpen={showCompany}>\n                <ListGroup>\n                  <ListGroupItem action className=\"border-light d-flex\" >\n                    <span className=\"font-semibold mr-auto col-sm-6\">Name:</span>\n                    <span className=\"col-sm-6\">{company.name}</span>\n                  </ListGroupItem>\n                  <ListGroupItem action className=\"border-light d-flex\" >\n                    <span className=\"font-semibold mr-auto col-sm-6\">website:</span>\n                    <span className=\"col-sm-6\">{company.website === \"\" ?\n                      <div className=\"text-muted\">Not set</div> :\n                      company.website}\n                    </span>\n                  </ListGroupItem>\n                  <ListGroupItem action className=\"border-light d-flex\" >\n                    <span className=\"font-semibold mr-auto col-sm-6\">address:</span>\n                    <span className=\"col-sm-6\">{company.address === \"\" ?\n                      <div className=\"text-muted\">Not set</div> :\n                      company.address}\n                    </span>\n                  </ListGroupItem>\n                  <ListGroupItem action className=\"border-light d-flex\" >\n                    <span className=\"font-semibold mr-auto col-sm-6\">email:</span>\n                    <span className=\"col-sm-6\">\n                      <span>{company.email === \"\" ?\n                        <div className=\"text-muted\">Not set</div> :\n                        company.email}\n                      </span>\n                    </span>\n                  </ListGroupItem>\n                  <ListGroupItem action className=\"border-light d-flex \" >\n                    <span className=\"font-semibold mr-auto col-sm-6\">Contact phone:</span>\n                    <span className=\"col-sm-6\">{company.phone === \"\" ?\n                      <div className=\"text-muted\">Not set</div> :\n                      company.phone}\n                    </span>\n                  </ListGroupItem>\n                  <ListGroupItem action className=\"border-light d-flex\" >\n                    <span className=\"font-semibold mr-auto col-sm-6\">Registration Date:</span>\n                    <span className=\"col-sm-6\">{company.registrationdate === \"\" ?\n                      <div className=\"text-muted\">Not set</div> :\n                      moment(company.registrationdate).format('YYYY-MM-DD')}\n                    </span>\n                  </ListGroupItem>\n                  <ListGroupItem action className=\"border-light d-flex\" >\n                    <span className=\"font-semibold mr-auto col-sm-6\">Description:</span>\n                    <span className=\"col-sm-6\">{!!!company.description ?\n                      <div className=\"text-muted\">Not set</div> :\n                      company.description}\n                    </span>\n                  </ListGroupItem>\n                </ListGroup>\n              </Collapse>\n            </CardBody>\n          </Card>\n          <div>\n            <hr className=\"hr-text\" data-content=\"Related Devices\" />\n          </div>\n          <Row>\n            {!!relatedDevices && relatedDevices.map((device, i) => {\n              return <Col lg=\"6\" md=\"6\" sm=\"12\" xs=\"12\" >\n                <Card>\n                  <CardHeader>\n                    Device Name:{' '}{device.name}\n                  </CardHeader>\n                  <br />\n                  {!!status && status[i].data.length < 1 && <Result\n                    status=\"404\"\n                    title=\"404\"\n                    subTitle=\"Not connected yet\"\n                  />}\n                  {!!status && status[i].data.length > 0 &&\n                    <Line\n                      data={genLineData(\n                        status[i].data.map(status => status.cpuusage),\n                        status[i].data.map(status => moment(new Date(status.dataAdded)).format(\"MM-DD HH:mm\")),\n                        \"Cpu Usage(%)\"\n                      )}\n                    />}\n                  <br />\n                  {!!status && status[i].data.length > 0 &&\n                    <Line\n                      data={genLineData(\n                        status[i].data.map(status => Math.floor(status.memusage * 100)),\n                        status[i].data.map(status => moment(new Date(status.dataAdded)).format(\"MM-DD HH:mm\")),\n                        \"Mem Usage(%)\"\n                      )}\n                    />}\n                </Card>\n              </Col>\n            })}\n          </Row>\n        </Col>\n        <Col lg=\"4\" md=\"4\" sm=\"12\" xs=\"12\">\n          <Card>\n            <CardHeader>\n              Calendar\n            </CardHeader>\n            <Calendar fullscreen={false} />\n          </Card>\n          <br />\n          {!!tasks &&\n            <Card>\n              <CardHeader>Related Task</CardHeader>\n              <CardBody>\n                <Pie data={getPieData(tasks)} />\n              </CardBody>\n            </Card>\n          }\n        </Col>\n      </Row>\n    </Page>\n  );\n}\nexport default DashboardPage;\n"],"sourceRoot":""}