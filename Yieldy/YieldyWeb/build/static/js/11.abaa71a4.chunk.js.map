{"version":3,"sources":["utils/dimension.js","container/ExplorePages/System.js"],"names":["getWindowDimensions","window","width","innerWidth","height","innerHeight","useWindowDimensions","useState","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","FabStyle","margin","top","right","bottom","left","position","System","props","isLoading","setIsLoading","isRefreshing","setIsRefreshing","showMember","setShowMember","noneContent","setNoneContet","company","useSelector","state","companies","system","systemInfo","userInfo","user","userProfile","dispatch","useDispatch","collapse","setCollapse","systemId","history","location","useHistory","rSelected","setRSelected","btnGroupContent","a","companyActions","fetchCompany","then","scrollTo","systems","length","_id","systemActions","fetchSystem","push","map","content","key","title","trigger","type","value","color","onClick","name","active","spinner","text","style","placement","closable","onClose","visible","className","data-content","xl","lg","md","sm","xs","display","justifyContent","alignItems","marginBottom","Group","role","admins","admin","includes","technicians","tech","todos","tasks","isOpen","size","status","subTitle"],"mappings":"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","file":"static/js/11.abaa71a4.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\n\nfunction getWindowDimensions() {\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height\n  };\n}\n\nexport const useWindowDimensions = () => {\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return windowDimensions;\n}","import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Fab from '@material-ui/core/Fab';\nimport { MdMessage } from 'react-icons/md';\nimport LoadingOverlay from 'react-loading-overlay';\nimport { Popover, Button, Radio, Drawer, Result } from 'antd';\nimport \"antd/dist/antd.css\";\n\nimport * as companyActions from '../../store/actions/company';\nimport * as systemActions from '../../store/actions/system';\nimport { PageSpinner, Page } from 'components/BasicElement';\nimport { SystemCard, DeviceCard, TodosCard, MessageCard } from 'components/Card';\nimport { Row, Col, Collapse } from 'reactstrap';\nimport { useWindowDimensions } from '../../utils/dimension';\nimport { useHistory } from 'react-router';\n\nconst FabStyle = {\n    margin: 0,\n    top: 'auto',\n    right: 20,\n    bottom: 20,\n    left: 'auto',\n    position: 'fixed',\n};\n\n\nconst System = props => {\n\n    const [isLoading, setIsLoading] = useState(false);\n    const [isRefreshing, setIsRefreshing] = useState(false);\n    const [showMember, setShowMember] = useState(false);\n    const [noneContent, setNoneContet] = useState(false);\n    const company = useSelector(state => state.company.companies[0]);\n    const system = useSelector(state => state.system.systemInfo);\n    const userInfo = useSelector(state => state.user.userProfile);\n    const dispatch = useDispatch();\n    const [collapse, setCollapse] = useState(true);\n    const systemId = props.history.location.state;\n    const { width } = useWindowDimensions();\n    const history = useHistory();\n\n    const [rSelected, setRSelected] = useState(!!systemId ? systemId[\"systemId\"] : null);\n    let btnGroupContent = null;\n\n\n    useEffect(() => {\n        setIsLoading(true);\n        async function fetchCompany() {\n            await dispatch(companyActions.fetchCompany())\n        }\n        fetchCompany().then(setIsLoading(false));\n        window.scrollTo(0, 0);\n        return () => { }\n    }, [dispatch])\n\n    useEffect(() => {\n        if (!!company && company.systems.length > 0) {\n            if (!!!systemId) {\n                setRSelected(company.systems[0]._id);\n            }\n        } else {\n            setNoneContet(true);\n        }\n    }, [btnGroupContent, company, systemId])\n\n    useEffect(() => {\n        setIsRefreshing(true);\n        async function fetchSystem() {\n            await dispatch(systemActions.fetchSystemById(rSelected));\n        }\n        if (!!rSelected) {\n            fetchSystem().then(setIsRefreshing(false));\n        }\n    }, [rSelected, dispatch])\n\n    if (noneContent) {\n        history.push('/company');\n    }\n\n    if (isLoading || !!!company || !!!userInfo || !!!system) {\n        return (\n            <PageSpinner />\n        )\n    }\n\n    if (!isLoading && !!company && !!userInfo && !!system) {\n        btnGroupContent = company.systems.map((system) => {\n            return <Popover content={\"Click to switch system\"} key={system._id} title=\"Hint\" trigger=\"hover\">\n                <Button\n                    type={system._id === rSelected && \"primary\"}\n                    value={system._id}\n                    color=\"primary\"\n                    onClick={() => setRSelected(system._id)}>\n                    {system.name}\n                </Button>\n            </Popover>\n        })\n    }\n    return (\n        <LoadingOverlay\n            active={isRefreshing}\n            spinner\n            text='Loading your content...'\n        >\n            <Page style={{ margin: 20 }} >\n                <Drawer\n                    width={width < 800 ? \"70%\" : 500}\n                    title=\"Comments\"\n                    placement=\"right\"\n                    closable\n                    onClose={() => setCollapse(!collapse)}\n                    visible={!collapse}\n                >\n                    {!collapse && <MessageCard style={{ width: 300 }} system={system._id} />}\n                </Drawer>\n                <div>\n                    <hr className=\"hr-text\" data-content=\"System\" />\n                </div>\n                <Row>\n                    <Col xl=\"10\" lg=\"10\" md=\"10\" sm=\"12\" xs=\"12\" style={{ display: 'flex', justifyContent: 'flex-start', alignItems: 'center', marginBottom: 20 }}>\n                        <Radio.Group value={rSelected}>\n                            {btnGroupContent}\n                        </Radio.Group>\n                    </Col>\n                    {(userInfo.role === \"co\" ||\n                        system.admins.map(admin => { return admin._id }).includes(userInfo._id) ||\n                        system.technicians.map(tech => { return tech._id }).includes(userInfo._id)) && <Col xl=\"2\" lg=\"2\" md=\"2\" sm=\"12\" xs=\"12\" style={{ display: 'flex', justifyContent: 'flex-end', alignItems: 'center', marginBottom: 20 }}>\n                            <Button className=\"right-0\" onClick={() => setShowMember(!showMember)} >\n                                {showMember ? <small>Show Members</small> : <small>Hide Members</small>}\n                            </Button>\n                        </Col>\n                    }\n                </Row>\n                {userInfo.role === \"co\" ||\n                    system.admins.map(admin => { return admin._id }).includes(userInfo._id) ||\n                    system.technicians.map(tech => { return tech._id }).includes(userInfo._id) ? ( //check if user belong to this system\n                        <div>\n                            <Row >\n                                <Col lg={!showMember ? \"8\" : \"12\"} md=\"12\" sm=\"12\" xs=\"12\" >\n                                    <TodosCard todos={system.tasks} className=\"mb-4\" />\n                                    <DeviceCard />\n                                </Col>\n                                <Col lg=\"4\" md=\"12\" sm=\"12\" xs=\"12\" >\n                                    <Collapse isOpen={!showMember}>\n                                        <SystemCard color=\"info\" className=\"mb-4\" />\n                                    </Collapse>\n                                </Col>\n                                <Fab style={FabStyle} onClick={() => { setCollapse(!collapse) }}>\n                                    <MdMessage size=\"30\" />\n                                </Fab>\n                            </Row>\n                        </div>) : <Result\n                        status=\"403\"\n                        title=\"403\"\n                        subTitle=\"Sorry, you are not authorized to access this page.\"\n                    />}\n            </Page>\n        </LoadingOverlay>\n    )\n}\n\nexport default System;"],"sourceRoot":""}