{"version":3,"sources":["utils/colors.js","utils/dimension.js","container/ExplorePages/Device.js"],"names":["getColor","availableColor","window","color","getComputedStyle","document","documentElement","getPropertyValue","getWindowDimensions","width","innerWidth","height","innerHeight","useWindowDimensions","useState","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","FabStyle","margin","top","right","bottom","left","position","genLineData","data","barLabel","chartLabel","labels","reverse","datasets","label","backgroundColor","borderColor","borderWidth","Device","props","collapse","setCollapse","isLoading","setIsLoading","deviceInfo","useSelector","state","device","fetchedDevice","company","companies","userInfo","user","userProfile","statusInfo","fetchedStatus","system","_id","rSelected","setRSelected","rSelDevice","setRSelDivice","deviceId","setDeviceId","redirected","setRedirected","dispatch","useDispatch","systemBtnContent","deviceMenu","selectedSystem","a","deviceActions","fetchCompany","companyActions","location","fetchDeivce","then","statusCode","name","fetchStatus","systems","map","content","key","title","trigger","type","value","onClick","filter","devices","Item","style","placement","closable","onClose","visible","className","data-content","xl","lg","md","sm","xs","display","justifyContent","alignItems","marginBottom","Group","overlay","e","preventDefault","role","admins","includes","technicians","systemId","onDelete","reload","length","status","cpuusage","moment","Date","dataAdded","format","Math","floor","memusage","arch","platform","uptime","cores","hover","responsive","openedPort","port","index","protocol","service","method","size","subTitle"],"mappings":"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","file":"static/js/7.79b29d83.chunk.js","sourcesContent":["// const availableColors = [\n//   'blue',\n//   'indigo',\n//   'purple',\n//   'pink',\n//   'red',\n//   'orange',\n//   'yellow',\n//   'green',\n//   'teal',\n//   'cyan',\n//   'white',\n//   'gray',\n//   'gray-dark',\n//   'primary',\n//   'secondary',\n//   'success',\n//   'info',\n//   'warning',\n//   'danger',\n//   'light',\n//   'dark',\n// ];\n\nexport const getColor = (availableColor = 'primary') => {\n  if (typeof window === 'undefined') {\n    return null;\n  }\n\n  const color = window\n    .getComputedStyle(document.documentElement)\n    .getPropertyValue(`--${availableColor}`);\n\n  return color;\n};\n\nexport const getThemeColors = () => [\n  'primary',\n  'secondary',\n  'success',\n  'info',\n  'warning',\n  'danger',\n];\n","import { useState, useEffect } from 'react';\n\nfunction getWindowDimensions() {\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height\n  };\n}\n\nexport const useWindowDimensions = () => {\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return windowDimensions;\n}","import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Popover, Button, Radio, Drawer, Menu, Dropdown, Card, Result } from 'antd';\nimport Fab from '@material-ui/core/Fab';\nimport { MdMessage } from 'react-icons/md';\nimport { Row, Col, CardBody, Table } from 'reactstrap';\nimport { DownOutlined } from '@ant-design/icons';\nimport { Line, } from 'react-chartjs-2';\nimport moment from 'moment';\n\nimport { useWindowDimensions } from '../../utils/dimension';\nimport * as deviceActions from '../../store/actions/device';\nimport * as companyActions from '../../store/actions/company';\nimport { PageSpinner, Page } from 'components/BasicElement';\nimport { MessageCard, DeviceInfoCard } from 'components/Card';\nimport { getColor } from 'utils/colors';\n\nconst FabStyle = {\n    margin: 0,\n    top: 'auto',\n    right: 20,\n    bottom: 20,\n    left: 'auto',\n    position: 'fixed',\n};\n\nconst genLineData = (data, barLabel, chartLabel) => {\n    return {\n        labels: barLabel.reverse(),\n        datasets: [\n            {\n                label: chartLabel,\n                backgroundColor: getColor('primary'),\n                borderColor: getColor('primary'),\n                borderWidth: 1,\n                data: data.reverse(),\n            },\n        ],\n    };\n};\n\nconst Device = props => {\n\n    const { width } = useWindowDimensions();\n    const [collapse, setCollapse] = useState(true);\n    const [isLoading, setIsLoading] = useState(false);\n    const deviceInfo = useSelector(state => state.device.fetchedDevice);\n    const company = useSelector(state => state.company.companies[0]);\n    const userInfo = useSelector(state => state.user.userProfile);\n    const statusInfo = useSelector(state => state.device.fetchedStatus)\n    const [rSelected, setRSelected] = useState(!!deviceInfo ? deviceInfo.system._id : null);\n    const [rSelDevice, setRSelDivice] = useState(null);\n    const [deviceId, setDeviceId] = useState(null);\n    const [redirected, setRedirected] = useState(false);\n    const dispatch = useDispatch();\n    let systemBtnContent = null;\n    let deviceMenu = null;\n    let selectedSystem = null;\n\n\n    useEffect(() => {\n        setIsLoading(true);\n        if (!!props.location.state && !!props.location.state.device && !!!rSelDevice) {\n            setDeviceId(props.location.state.device);\n            setRedirected(true);\n        } else {\n            setRedirected(false);\n        }\n        async function fetchDeivce() {\n            await dispatch(deviceActions.fetchdevicebyid(deviceId));\n        }\n        async function fetchCompany() {\n            await dispatch(companyActions.fetchCompany())\n        }\n        if (!!deviceId) {\n            fetchDeivce()\n                .then(fetchCompany())\n                .then(setIsLoading(false));\n        } else {\n            fetchCompany().then(setIsLoading(false));\n        }\n    }, [dispatch, deviceId, props.location.state, rSelDevice])\n\n    useEffect(() => {\n        async function fetchStatus() {\n            await dispatch(deviceActions.fetchStatus(deviceInfo.statusCode));\n        }\n        if (!!deviceInfo) {\n            setRSelected(deviceInfo.system._id);\n            setRSelDivice(deviceInfo.name);\n            fetchStatus();\n        }\n        return () => {\n\n        }\n    }, [deviceInfo, dispatch])\n\n    const deleteHandler = () => {\n        window.location.reload();\n    }\n\n\n\n    if (isLoading || !!!userInfo || !!!company) {\n        return <PageSpinner />\n    }\n\n\n    if (!!company) {\n        systemBtnContent = company.systems.map(system => {\n            return <Popover content={\"Click to switch system\"} key={system._id} title=\"Hint\" trigger=\"hover\">\n                <Button\n                    type={system._id === rSelected && \"primary\"}\n                    value={system._id}\n                    color=\"primary\"\n                    onClick={() => setRSelected(system._id)}>\n                    {system.name}\n                </Button>\n            </Popover>\n        })\n\n        if (rSelected) {\n            selectedSystem = company.systems.filter(system => system._id === rSelected);\n            deviceMenu = (\n                <Menu>\n                    {selectedSystem[0].devices.map(device => {\n                        return <Menu.Item\n                            key={device._id}\n                            onClick={() => {\n                                setRSelDivice(device.name);\n                                setDeviceId(device._id);\n                            }\n                            }\n                        >\n                            {device.name}\n                        </Menu.Item>\n                    })}\n                </Menu>\n            );\n        }\n    }\n\n\n    if (!!!deviceInfo && !!!rSelected) {\n        return <Page style={{ margin: 20 }} >\n            <div>\n                <hr className=\"hr-text\" data-content=\"Device\" />\n            </div>\n            <Row>\n                <Col xl=\"12\" lg=\"12\" md=\"12\" sm=\"12\" xs=\"12\" style={{ display: 'flex', justifyContent: 'flex-start', alignItems: 'center', marginBottom: 20 }}>\n                    <Radio.Group value={rSelected}>\n                        {systemBtnContent}\n                        {' '}\n                        <Radio.Group >\n                            {!!deviceMenu && <Dropdown overlay={deviceMenu}>\n                                <Button className=\"ant-dropdown-link\" onClick={e => e.preventDefault()}>\n                                    {!!rSelDevice ? rSelDevice : \"Select Device\"}<DownOutlined />\n                                </Button>\n                            </Dropdown>}\n                        </Radio.Group>\n                    </Radio.Group>\n                </Col>\n            </Row>\n            <Result\n                status=\"404\"\n                title=\"!!!!\"\n                subTitle=\"Select system and device first \"\n            />\n        </Page>\n    }\n\n    return (\n        <Page style={{ margin: 20 }} >\n            <Drawer\n                width={width < 800 ? \"70%\" : 500}\n                title=\"Comments\"\n                placement=\"right\"\n                closable={false}\n                onClose={() => setCollapse(!collapse)}\n                visible={!collapse}\n            >\n                {deviceInfo && <MessageCard style={{ width: 300 }} system={deviceInfo.system._id} />}\n            </Drawer>\n            <div>\n                <hr className=\"hr-text\" data-content=\"Device\" />\n            </div>\n            <Row>\n                <Col xl=\"12\" lg=\"12\" md=\"12\" sm=\"12\" xs=\"12\" style={{ display: 'flex', justifyContent: 'flex-start', alignItems: 'center', marginBottom: 20 }}>\n                    <Radio.Group value={rSelected}>\n                        {systemBtnContent}\n                        {' '}\n                        {!!deviceMenu && <Dropdown overlay={deviceMenu}>\n                            <Button className=\"ant-dropdown-link\" onClick={e => e.preventDefault()}>\n                                {!!rSelDevice ? rSelDevice : \"Select Device\"}<DownOutlined />\n                            </Button>\n                        </Dropdown>}\n                    </Radio.Group>\n                </Col>\n            </Row>\n            {userInfo.role === \"co\" ||\n                redirected ||\n                company.systems.filter(system => system._id === rSelected)[0].admins.includes(userInfo._id)\n                || company.systems.filter(system => system._id === rSelected)[0].technicians.includes(userInfo._id) ? (\n                    <div>\n                        {!!deviceInfo && deviceInfo.system._id === rSelected ? <div>\n                            <Row>\n                                <Col lg=\"12\" md=\"12\" sm=\"12\" xs=\"12\" >\n                                    {!!deviceInfo && <DeviceInfoCard deviceInfo={deviceInfo} systemId={rSelected} onDelete={deleteHandler} />}\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col lg=\"8\" md=\"8\" sm=\"12\" xs=\"12\" >\n                                    {!!statusInfo && statusInfo.length > 0 && <div> < Card >\n                                        <CardBody>\n                                            <Line\n                                                data={genLineData(\n                                                    statusInfo.map(status => status.cpuusage),\n                                                    statusInfo.map(status => moment(new Date(status.dataAdded)).format(\"MM-DD HH:mm\")),\n                                                    \"Cpu Usage(%)\"\n                                                )}\n                                            />\n                                        </CardBody>\n                                    </Card>\n                                        <br />\n                                        < Card >\n                                            <CardBody>\n                                                <Line\n                                                    data={genLineData(\n                                                        statusInfo.map(status => Math.floor(status.memusage * 100)),\n                                                        statusInfo.map(status => moment(new Date(status.dataAdded)).format(\"MM-DD HH:mm\")),\n                                                        \"Mem. Usage(%)\"\n                                                    )}\n                                                />\n                                            </CardBody>\n                                        </Card>\n                                    </div>\n                                    }\n                                </Col>\n                                <Col lg=\"4\" md=\"4\" sm=\"12\" xs=\"12\" >\n                                    {!!statusInfo && statusInfo.length > 0 && <div> <Card title=\"Status Detail\" >\n                                        <p>Arch: {statusInfo[0].arch}</p>\n                                        <p>Platform: {statusInfo[0].platform}</p>\n                                        <p>Up time: {Math.floor(statusInfo[0].uptime / 60)} mins</p>\n                                        <p>#Cores: {statusInfo[0].cores}</p>\n                                    </Card>\n                                        <br />\n                                        <Card title=\"Opened Ports\" >\n                                            <Table hover responsive className=\"bg-white\">\n                                                <thead>\n                                                    <tr>\n                                                        <th><small>Port</small></th>\n                                                        <th><small>Protocol</small></th>\n                                                        <th><small>Service</small></th>\n                                                        <th><small>Method</small></th>\n                                                    </tr>\n                                                </thead>\n                                                <tbody>\n                                                    {!!statusInfo[0].openedPort && statusInfo[0].openedPort.map((port, index) => {\n                                                        return <tr key={index} >\n                                                            <td>{port.port}</td>\n                                                            <td>{port.protocol}</td>\n                                                            <td> {port.service}\n                                                            </td>\n                                                            <td>  {port.method}\n                                                            </td>\n                                                        </tr>\n                                                    })}\n                                                </tbody>\n                                            </Table>\n                                        </Card>\n                                    </div>}\n                                </Col>\n                            </Row>\n                            <Fab style={FabStyle} onClick={() => { setCollapse(!collapse) }}>\n                                <MdMessage size=\"30\" />\n                            </Fab>\n                        </div> : <Result\n                                status=\"404\"\n                                title=\"404\"\n                                subTitle=\"Sorry, the page you visited does not exist.\"\n                            />}\n                    </div>) : <Result\n                    status=\"403\"\n                    title=\"403\"\n                    subTitle=\"Sorry, you are not authorized to access this page.\" />\n            }\n        </Page >\n\n    )\n}\n\nexport default Device;"],"sourceRoot":""}