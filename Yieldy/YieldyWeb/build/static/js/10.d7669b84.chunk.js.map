{"version":3,"sources":["../node_modules/reactstrap/es/Collapse.js","container/ExplorePages/Company.js"],"names":["_transitionStatusToCl","propTypes","_objectSpread2","Transition","isOpen","PropTypes","bool","children","oneOfType","arrayOf","node","tag","tagPropType","className","navbar","cssModule","object","innerRef","func","string","defaultProps","appear","enter","exit","timeout","TransitionTimeouts","Collapse","transitionStatusToClassHash","TransitionStatuses","ENTERING","ENTERED","EXITING","EXITED","getHeight","scrollHeight","_Component","props","_this","call","this","state","height","forEach","name","bind","_assertThisInitialized","_inheritsLoose","_proto","prototype","onEntering","isAppearing","setState","onEntered","onExit","onExiting","offsetHeight","onExited","render","_this2","_this$props","Tag","otherProps","_objectWithoutPropertiesLoose","transitionProps","pick","TransitionPropTypeKeys","childProps","omit","React","createElement","_extends","in","status","collapseClass","getTransitionClass","classes","mapToCssModules","classNames","style","ref","Component","AvatarWithBadge","withBadge","position","color","Avatar","Company","useState","isLoading","setIsLoading","showCompany","setShowCompany","showUser","setShowUser","updateCompany","setUpdateCompany","rSelected","setRSelected","userType","setUserType","userId","setUserId","visible","setVisible","showCreateSys","setShowCreateSys","createUser","setCreateUser","company","useSelector","companies","profile","user","userProfile","systemContent","adminContent","technicianContent","dispatch","useDispatch","useEffect","a","companyActions","fetchCompany","then","systems","length","_id","toggleUpdateCompany","toggleShowUser","type","Id","handleVisibleChange","toggleAndRefresh","handleDelete","systemActions","overflowX","map","system","key","content","title","trigger","onClick","filter","action","admins","technicians","devices","history","push","systemId","onVisibleChange","owner","image","NoDataImage","imageStyle","description","responsive","hover","admin","backgroundColor","confirmed","src","profileImage","cloudImage","undefined","username","techn","margin","data-content","centered","toggle","onSuccess","lg","md","sm","xs","website","address","email","phone","registrationdate","moment","format","avatar","subtitle","text","role"],"mappings":"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","file":"static/js/10.d7669b84.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _objectSpread2 from \"@babel/runtime/helpers/esm/objectSpread\";\n\nvar _transitionStatusToCl;\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { Transition } from 'react-transition-group';\nimport { mapToCssModules, omit, pick, TransitionTimeouts, TransitionPropTypeKeys, TransitionStatuses, tagPropType } from './utils';\n\nvar propTypes = _objectSpread2({}, Transition.propTypes, {\n  isOpen: PropTypes.bool,\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),\n  tag: tagPropType,\n  className: PropTypes.node,\n  navbar: PropTypes.bool,\n  cssModule: PropTypes.object,\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.object])\n});\n\nvar defaultProps = _objectSpread2({}, Transition.defaultProps, {\n  isOpen: false,\n  appear: false,\n  enter: true,\n  exit: true,\n  tag: 'div',\n  timeout: TransitionTimeouts.Collapse\n});\n\nvar transitionStatusToClassHash = (_transitionStatusToCl = {}, _transitionStatusToCl[TransitionStatuses.ENTERING] = 'collapsing', _transitionStatusToCl[TransitionStatuses.ENTERED] = 'collapse show', _transitionStatusToCl[TransitionStatuses.EXITING] = 'collapsing', _transitionStatusToCl[TransitionStatuses.EXITED] = 'collapse', _transitionStatusToCl);\n\nfunction getTransitionClass(status) {\n  return transitionStatusToClassHash[status] || 'collapse';\n}\n\nfunction getHeight(node) {\n  return node.scrollHeight;\n}\n\nvar Collapse =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(Collapse, _Component);\n\n  function Collapse(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n    _this.state = {\n      height: null\n    };\n    ['onEntering', 'onEntered', 'onExit', 'onExiting', 'onExited'].forEach(function (name) {\n      _this[name] = _this[name].bind(_assertThisInitialized(_this));\n    });\n    return _this;\n  }\n\n  var _proto = Collapse.prototype;\n\n  _proto.onEntering = function onEntering(node, isAppearing) {\n    this.setState({\n      height: getHeight(node)\n    });\n    this.props.onEntering(node, isAppearing);\n  };\n\n  _proto.onEntered = function onEntered(node, isAppearing) {\n    this.setState({\n      height: null\n    });\n    this.props.onEntered(node, isAppearing);\n  };\n\n  _proto.onExit = function onExit(node) {\n    this.setState({\n      height: getHeight(node)\n    });\n    this.props.onExit(node);\n  };\n\n  _proto.onExiting = function onExiting(node) {\n    // getting this variable triggers a reflow\n    var _unused = node.offsetHeight; // eslint-disable-line no-unused-vars\n\n    this.setState({\n      height: 0\n    });\n    this.props.onExiting(node);\n  };\n\n  _proto.onExited = function onExited(node) {\n    this.setState({\n      height: null\n    });\n    this.props.onExited(node);\n  };\n\n  _proto.render = function render() {\n    var _this2 = this;\n\n    var _this$props = this.props,\n        Tag = _this$props.tag,\n        isOpen = _this$props.isOpen,\n        className = _this$props.className,\n        navbar = _this$props.navbar,\n        cssModule = _this$props.cssModule,\n        children = _this$props.children,\n        innerRef = _this$props.innerRef,\n        otherProps = _objectWithoutPropertiesLoose(_this$props, [\"tag\", \"isOpen\", \"className\", \"navbar\", \"cssModule\", \"children\", \"innerRef\"]);\n\n    var height = this.state.height;\n    var transitionProps = pick(otherProps, TransitionPropTypeKeys);\n    var childProps = omit(otherProps, TransitionPropTypeKeys);\n    return React.createElement(Transition, _extends({}, transitionProps, {\n      in: isOpen,\n      onEntering: this.onEntering,\n      onEntered: this.onEntered,\n      onExit: this.onExit,\n      onExiting: this.onExiting,\n      onExited: this.onExited\n    }), function (status) {\n      var collapseClass = getTransitionClass(status);\n      var classes = mapToCssModules(classNames(className, collapseClass, navbar && 'navbar-collapse'), cssModule);\n      var style = height === null ? null : {\n        height: height\n      };\n      return React.createElement(Tag, _extends({}, childProps, {\n        style: _objectSpread2({}, childProps.style, {}, style),\n        className: classes,\n        ref: _this2.props.innerRef\n      }), children);\n    });\n  };\n\n  return Collapse;\n}(Component);\n\nCollapse.propTypes = propTypes;\nCollapse.defaultProps = defaultProps;\nexport default Collapse;","import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n    CardBody,\n    ListGroup,\n    ListGroupItem,\n    Collapse,\n    Modal,\n    ModalBody,\n    ModalHeader,\n    Col,\n    Row,\n    CardHeader,\n    ButtonGroup,\n    ModalFooter,\n    Table,\n} from 'reactstrap';\nimport {\n    MdUnfoldMore,\n    MdUnfoldLess\n} from 'react-icons/md';\nimport { Button, Card, Empty, Popover } from 'antd';\nimport * as moment from 'moment'\n\nimport * as companyActions from '../../store/actions/company';\nimport * as systemActions from '../../store/actions/system';\nimport { Page, PageSpinner } from 'components/BasicElement';\nimport Avatar from '../../components/Avatar/Avatar';\nimport withBadge from '../../hocs/withBadge';\n\nimport { UpdateCompany, CreateSystem, CreateUser } from 'components/Form/';\nimport NoDataImage from 'assets/img/no-result.svg';\nimport { UserCard } from 'components/Card';\nimport { UserModal } from 'components/Info';\n\n\nconst AvatarWithBadge = withBadge({\n    position: 'bottom-right',\n    color: 'success',\n})(Avatar);\n\nconst Company = props => {\n\n    const [isLoading, setIsLoading] = useState(false);\n    const [showCompany, setShowCompany] = useState(true);\n    const [showUser, setShowUser] = useState(false);\n    const [updateCompany, setUpdateCompany] = useState(false);\n    const [rSelected, setRSelected] = useState(null);\n    const [userType, setUserType] = useState(null);\n    const [userId, setUserId] = useState(null);\n    const [visible, setVisible] = useState(false);\n    const [showCreateSys, setShowCreateSys] = useState(false);\n    const [createUser, setCreateUser] = useState(false);\n    const company = useSelector(state => state.company.companies[0]);\n    const profile = useSelector(state => state.user.userProfile);\n    let systemContent = null;\n    let adminContent = null;\n    let technicianContent = null;\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        setIsLoading(true);\n        async function fetchCompany() {\n            await dispatch(companyActions.fetchCompany())\n        }\n        fetchCompany().then(setIsLoading(false));\n    }, [dispatch])\n\n    useEffect(() => {\n        if (!!company && company.systems.length>0) {\n            setRSelected(company.systems[0]._id);\n        }\n    }, [systemContent, company])\n\n\n    const toggleUpdateCompany = () => setUpdateCompany(!updateCompany);\n\n    const toggleShowUser = (type, Id) => {\n        setUserType(type);\n        setUserId(Id);\n        setShowUser(!showUser);\n    };\n\n\n    const handleVisibleChange = visible => {\n        setVisible(visible);\n    };\n\n    const toggleAndRefresh = async () => {\n        await dispatch(companyActions.fetchCompany());\n        setShowUser(false);\n        setUserType(null);\n        setUserId(null);\n        setCreateUser(false);\n        setUpdateCompany(false);\n    }\n\n    const handleDelete = async () => {\n        await dispatch(systemActions.deleteSystem(rSelected)).then(setVisible(false));\n    }\n\n\n\n    if (isLoading || !!!company || !!!profile) {\n        return (\n            <PageSpinner />\n        )\n    }\n\n    if (company.systems.length >= 1) {\n        systemContent =\n            <Card style={{ overflowX: 'auto', 'paddingBottom': '15px', 'height': 'fit-content', 'paddingTop': 'inherit' }}>\n                <ButtonGroup>\n                    {company.systems.map((system) => {\n                        return <Popover key={system._id} content={\"Click to switch system\"} title=\"Hint\" trigger=\"hover\">\n                            <Button\n                                onClick={() => setRSelected(system._id)}\n                                type={rSelected === system._id && \"primary\"}>\n                                {system.name}\n                            </Button>\n                        </Popover>\n                    })}\n                </ButtonGroup>\n                {!!rSelected ? <> {company.systems.filter((system) => {\n                    return system._id === rSelected;\n                }).map(system => {\n                    return (\n                        <ListGroup key={system._id}>\n                            <ListGroupItem action className=\"border-light d-flex\" >\n                                <span className=\"font-semibold mr-auto col-sm-6\">Name:</span>\n                                <span className=\"col-sm-6\">{system.name}</span>\n                            </ListGroupItem>\n                            <ListGroupItem action className=\"border-light d-flex\" >\n                                <span className=\"font-semibold mr-auto col-sm-6\">#Admin:</span>\n                                <span className=\"col-sm-6\">{system.admins.length}</span>\n                            </ListGroupItem>\n                            <ListGroupItem action className=\"border-light d-flex\">\n                                <span className=\"font-semibold mr-auto col-sm-6\">#Technicians:</span>\n                                <span className=\"col-sm-6\">{system.technicians.length}</span>\n                            </ListGroupItem>\n                            <ListGroupItem action className=\"border-light d-flex\">\n                                <span className=\"font-semibold mr-auto col-sm-6\">#Conected Devices:</span>\n                                <span className=\"col-sm-6\">{system.devices.length}</span>\n                            </ListGroupItem>\n                            <ListGroupItem action className=\"border-light text-right\">\n                                <Button\n                                    onClick={() => props.history.push('/system', { systemId: system._id })}\n                                >More detail</Button>{' '}\n                                <Popover\n                                    content={<Button type=\"danger\" onClick={handleDelete} >^_^Yes</Button>}\n                                    title=\"Are you sure?\"\n                                    trigger=\"click\"\n                                    visible={visible}\n                                    onVisibleChange={handleVisibleChange}\n                                >\n                                    {company.owner._id === profile._id &&\n                                        <Button className=\"align-self-center text-red-500 mr-4 cursor-pointer\">\n                                            Delete\n                                    </Button>}\n                                </Popover>\n                            </ListGroupItem>\n                        </ListGroup>)\n                })}</> : null}\n            </Card>\n    } else {\n        systemContent =\n            <ListGroupItem action className=\"border-light justify-center d-flex\" color=\"info\">\n                <Empty\n                    className=\"-auto\"\n                    image={NoDataImage}\n                    imageStyle={{\n                        height: 100,\n                    }}\n                    description={false}\n                />\n            </ListGroupItem>;\n    }\n\n    if (company.admins.length >= 1) {\n        adminContent =\n            <Table responsive hover>\n                <tbody>\n                    {company.admins.map((admin) => {\n                        return (\n                            <tr\n                                className=\"cursor-pointer\"\n                                key={admin._id}\n                                style={{ backgroundColor: admin.confirmed ? \"#eee\" : \"#cc2\" }}\n                                onClick={() => toggleShowUser(\"admins\", admin._id)}>\n                                <td className=\"align-middle text-center\" >\n                                    <AvatarWithBadge src={!!admin.profileImage ? admin.profileImage.cloudImage : undefined} />\n                                </td>\n                                <td className=\"align-middle text-center\">{!admin.name ? admin.username : admin.name}</td>\n                            </tr>\n                        )\n                    })}\n                </tbody>\n            </Table>\n    } else {\n        adminContent =\n            <ListGroupItem action className=\"border-light justify-center d-flex\" color=\"info\">\n                <Empty\n                    className=\"-auto\"\n                    image={NoDataImage}\n                    imageStyle={{\n                        height: 100,\n                    }}\n                    description={false}\n                />\n            </ListGroupItem>;\n    }\n\n    if (company.technicians.length >= 1) {\n        technicianContent =\n            <Table responsive hover>\n                <tbody>\n                    {company.technicians.map((techn) => {\n                        return (\n                            <tr\n                                className=\"cursor-pointer\"\n                                key={techn._id}\n                                style={{ backgroundColor: techn.confirmed ? \"#eee\" : \"#cc2\" }}\n                                onClick={() => toggleShowUser(\"technicians\", techn._id)}>\n                                <td className=\"align-middle text-center\" >\n                                    <AvatarWithBadge src={!!techn.profileImage ? techn.profileImage.cloudImage : undefined} />\n                                </td>\n                                <td className=\"align-middle text-center\">{!techn.name ? techn.username : techn.name}</td>\n                            </tr>\n                        )\n                    })}\n                </tbody>\n            </Table>\n    } else {\n        technicianContent =\n            <ListGroupItem action className=\"border-light justify-center d-flex\" color=\"info\">\n                <Empty\n                    className=\"-auto\"\n                    image={NoDataImage}\n                    imageStyle={{\n                        height: 100,\n                    }}\n                    description={false}\n                />\n            </ListGroupItem>;\n    }\n\n    return (\n        <Page style={{ margin: 20 }}>\n            <div>\n                <hr className=\"hr-text\" data-content=\"Company\" />\n            </div>\n            {/* Modal part */}\n            <Modal\n                centered\n                isOpen={updateCompany}\n                toggle={toggleUpdateCompany}\n            >\n                <ModalHeader>\n                    Update Company\n                </ModalHeader>\n                <ModalBody>\n                    <UpdateCompany company={company} onSuccess={() => { dispatch(toggleAndRefresh) }} />\n                </ModalBody>\n            </Modal>\n            <Modal\n                centered\n                isOpen={showCreateSys}\n                toggle={() => setShowCreateSys(false)}\n            >\n                <ModalHeader>\n                    Create System\n                </ModalHeader>\n                <ModalBody>\n                    <CreateSystem onSuccess={() => setShowCreateSys(false)} />\n                </ModalBody>\n            </Modal>\n            <Modal\n                centered\n                isOpen={createUser}\n                toggle={() => setCreateUser(false)}\n            >\n                <ModalHeader>\n                    Create User\n                </ModalHeader>\n                <ModalBody>\n                    <CreateUser onSuccess={toggleAndRefresh} />\n                </ModalBody>\n                <ModalFooter>\n                    <Button color=\"secondary\" onClick={() => setCreateUser(false)}>Cancel</Button>\n                </ModalFooter>\n            </Modal>\n            <Modal\n                centered\n                isOpen={showUser}\n                toggle={() => toggleShowUser(null, null)}\n            >\n                <ModalHeader>\n                    User Info\n                </ModalHeader>\n                <ModalBody>\n                    <UserModal\n                        type={userType}\n                        userId={userId}\n                        onSuccess={toggleAndRefresh}\n                    />\n                </ModalBody>\n                <ModalFooter>\n                    <Button\n                        color=\"secondary\"\n                        onClick={() => toggleShowUser(null, null)}>Cancel</Button>\n                </ModalFooter>\n            </Modal>\n            <Row>\n                <Col lg=\"8\" md=\"8\" sm=\"12\" xs=\"12\" >\n                    <Card className=\"mb-4\" color=\"info\">\n                        <CardHeader>\n                            <Row className=\"d-flex\">\n                                <div className=\"mx-8 ml-4 mr-auto\">Company</div>\n                                {company.owner._id === profile._id ?\n                                    <div className=\"align-self-center text-red-500 mr-4 cursor-pointer\" onClick={toggleUpdateCompany}>\n                                        Edit\n                                    </div> : null}\n                            </Row>\n                        </CardHeader>\n                        <CardBody>\n                            <ListGroup>\n                                <ListGroupItem action className=\"border-light d-flex\" onClick={() => { setShowCompany(!showCompany) }} color=\"info\">\n                                    <div className=\"mx-8 font-semibold col-md-8 mr-auto\">\n                                        Detail\n                                </div>\n                                    <div className=\"align-self-center text-red-500\">\n                                        {showCompany ? <MdUnfoldLess /> : <MdUnfoldMore />}\n                                    </div>\n                                </ListGroupItem>\n                            </ListGroup>\n                            <Collapse isOpen={showCompany}>\n                                <ListGroup>\n                                    <ListGroupItem action className=\"border-light d-flex\" >\n                                        <span className=\"font-semibold mr-auto col-sm-6\">Name:</span>\n                                        <span className=\"col-sm-6\">{company.name}</span>\n                                    </ListGroupItem>\n                                    <ListGroupItem action className=\"border-light d-flex\" >\n                                        <span className=\"font-semibold mr-auto col-sm-6\">website:</span>\n                                        <span className=\"col-sm-6\">{company.website === \"\" ?\n                                            <div className=\"text-muted\">Not set</div> :\n                                            company.website}\n                                        </span>\n                                    </ListGroupItem>\n                                    <ListGroupItem action className=\"border-light d-flex\" >\n                                        <span className=\"font-semibold mr-auto col-sm-6\">address:</span>\n                                        <span className=\"col-sm-6\">{company.address === \"\" ?\n                                            <div className=\"text-muted\">Not set</div> :\n                                            company.address}\n                                        </span>\n                                    </ListGroupItem>\n                                    <ListGroupItem action className=\"border-light d-flex\" >\n                                        <span className=\"font-semibold mr-auto col-sm-6\">email:</span>\n                                        <span className=\"col-sm-6\">\n                                            <span>{company.email === \"\" ?\n                                                <div className=\"text-muted\">Not set</div> :\n                                                company.email}\n                                            </span>\n                                        </span>\n                                    </ListGroupItem>\n                                    <ListGroupItem action className=\"border-light d-flex \" >\n                                        <span className=\"font-semibold mr-auto col-sm-6\">Contact phone:</span>\n                                        <span className=\"col-sm-6\">{company.phone === \"\" ?\n                                            <div className=\"text-muted\">Not set</div> :\n                                            company.phone}\n                                        </span>\n                                    </ListGroupItem>\n                                    <ListGroupItem action className=\"border-light d-flex\" >\n                                        <span className=\"font-semibold mr-auto col-sm-6\">Registration Date:</span>\n                                        <span className=\"col-sm-6\">{company.registrationdate === \"\" ?\n                                            <div className=\"text-muted\">Not set</div> :\n                                            moment(company.registrationdate).format('YYYY-MM-DD')}\n                                        </span>\n                                    </ListGroupItem>\n                                    <ListGroupItem action className=\"border-light d-flex\" >\n                                        <span className=\"font-semibold mr-auto col-sm-6\">Description:</span>\n                                        <span className=\"col-sm-6\">{!!!company.description ?\n                                            <div className=\"text-muted\">Not set</div> :\n                                            company.description}\n                                        </span>\n                                    </ListGroupItem>\n                                </ListGroup>\n                            </Collapse>\n                        </CardBody>\n                    </Card>\n                    <Card color=\"info\">\n                        <CardHeader>\n                            <Row className=\"d-flex\">\n                                <div className=\"mx-8 ml-4 mr-auto\">Systems</div>\n                                {company.owner._id === profile._id ?\n                                    <div\n                                        className=\"align-self-center text-red-500 mr-4 cursor-pointer\"\n                                        onClick={() => { setShowCreateSys(true) }}\n                                    >\n                                        Create\n                                    </div> : null}\n                            </Row>\n                        </CardHeader>\n                        <CardBody>\n                            {systemContent}\n                        </CardBody>\n                    </Card>\n                </Col>\n                <Col lg=\"4\" md=\"4\" sm=\"12\" xs=\"12\" >\n                    <Card className=\"mb-4\">\n                        <CardHeader>\n                            Owner\n                        </CardHeader>\n                        <UserCard\n                            avatar={!!company.owner.profileImage ? company.owner.profileImage.cloudImage : undefined}\n                            title={company.owner.username}\n                            subtitle={\"Own \" + company.owner.company.length + \" companies\"}\n                            text={company.owner.email}\n                            style={{\n                                height: 300,\n                            }}\n                        >\n                            <Button\n                                color='light'\n                                onClick={() => toggleShowUser(company.owner.role, company.owner._id)}\n                            > Detail</Button>\n                        </UserCard>\n\n                    </Card>\n                    <Card color=\"info\">\n                        <CardHeader className=\"mb-3\">\n                            <Row className=\"d-flex\">\n                                <div className=\"mx-8 ml-4 mr-auto\">Members</div>\n                                {company.owner._id === profile._id ?\n                                    <div className=\"align-self-center text-red-500 mr-4 cursor-pointer\" onClick={() => setCreateUser(true)}>\n                                        Add User\n                                    </div> : null}\n                            </Row>\n                        </CardHeader>\n                        <ListGroupItem>\n                            Admin\n                        </ListGroupItem>\n                        {adminContent}\n                        <ListGroupItem>\n                            Technician\n                            </ListGroupItem>\n                        {technicianContent}\n                    </Card>\n                </Col>\n            </Row>\n        </Page>\n    )\n}\n\nexport default Company;"],"sourceRoot":""}